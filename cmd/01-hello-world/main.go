package main

/*
Golang - это язык программирования, который был разработан компанией Google.
Он был представлен в 2009 году и широко используется для создания
высокопроизводительных распределенных систем.

Golang статически типизированный компилируемый язык, который поддерживает
объектно-ориентированное, процедурное и функциональное программирование.

Golang имеет простой синтаксис, который делает его легким для изучения и понимания.

Golang имеет встроенную поддержку параллелизма и конкурентности, что делает его
идеальным для создания высокопроизводительных распределенных систем.

Golang не имеет виртуальной машины, и компилирует исходный код в машинный код,
что позволяет не зависеть от системных библиотек и среды выполнения, а также
повышает производительность программ. Однако, это также означает, что Golang
не является кроссплатформенным языком, и программы, написанные на Golang, могут
работать только на тех платформах, для которых они были скомпилированы.

В отличие от PHP и других скриптовых языков, Golang требует компиляции перед исполнением.
А так же точку входа в программу, которая должна быть в функции main в пакете main.
Это внутреннее требование компилятора Go, и без этого он не сможет скомпилировать программу.

Golang поставляется с мощным набором инструментов, включая компилятор, пакетный менеджер,
средства тестирования и профилирования, и многие другие.

Листинг основных инструментов:
- go build </path/to/package> | <module/package> | </path/to/file.go> - компиляция пакета или файла
- go run </path/to/package> | <module/package> | </path/to/file.go> - компиляция и запуск пакета или файла
- go test </path/to/package> | <module/package> | </path/to/file.go> - запуск тестов пакета или файла
- go fmt </path/to/package> | <module/package> | </path/to/file.go> - форматирование пакета или файла
- go mod init <module-name> - инициализация модуля
- go mod tidy - обновление и форсирование зависимостей
- go mod vendor - копирование зависимостей в vendor
- go mod download - загрузка зависимостей
- go mod verify - проверка целостности модуля
- go mod graph - вывод графа зависимостей
- go mod why <module-name> - вывод причины зависимости
- go test -cover - запуск тестов с покрытием
- go test -bench - запуск бенчмарков
- go test -v - запуск тестов с подробным выводом
- go test -run <test-name> - запуск конкретного теста
- go test -benchmem - запуск бенчмарков с памятью
- go test -coverprofile=coverage.out - сохранение покрытия в файл
- go tool cover -html=coverage.out - отображение покрытия в браузере
- go tool pprof -http=:8080 <binary> - запуск профилирования
*/

func main() {
	println("Hello, World!")
}
