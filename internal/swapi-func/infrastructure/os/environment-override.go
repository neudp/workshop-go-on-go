package os

/*
Go не поддерживает дефолтные значения для аргументов функций, но можно использовать функции-обертки
Вместо передачи структуры в функцию, можно передать массив функций, которые будут изменять структуру

структура, как правило, должна быть недоступна извне (хотя это практика, а не правило),
соответственно, все мутирующие функции определены в пакете, где определена структура
Однако, тип функции-мутатора всегда доступен извне, таким образом, можно создать функцию-обертку
доступную извне, однако возможность изменения структуры аргумента остается внутри пакета

Такой подход называется каррированием, когда функция принимает один аргумент и возвращает другую функцию,
которая принимает следующий аргумент и т.д.

Каррирование и композиция - это два основных метода функционального программирования
*/

type EnvironmentOverride func(value *appEnvValues) *appEnvValues

func OverrideSwapiURL(url string) EnvironmentOverride {
	return func(value *appEnvValues) *appEnvValues {
		value.SwapiURL = url
		return value
	}
}

func OverrideMinLogLevel(level string) EnvironmentOverride {
	return func(value *appEnvValues) *appEnvValues {
		value.MinLogLevel = level
		return value
	}
}
